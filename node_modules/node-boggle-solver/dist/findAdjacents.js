'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = findAdjacents;

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var directions = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];

function findAdjacents(position, size) {
  var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  var allDirections = directions.slice(0);

  var _position = _slicedToArray(position, 2),
      row = _position[0],
      col = _position[1];

  return allDirections.reduce(function (adjacents, direction) {
    var _direction = _slicedToArray(direction, 2),
        x = _direction[0],
        y = _direction[1];

    var rowSum = x < 0 ? row - Math.abs(x) : row + x;
    var colSum = y < 0 ? col - Math.abs(y) : col + y;

    var validPosition = rowSum >= 0 && colSum >= 0;
    var validSize = rowSum < size && colSum < size;

    if (validPosition && validSize) {
      var adjacent = [rowSum, colSum];

      if (!_utils2.default.arrayMatch(filter, adjacent)) {
        adjacents.push(adjacent);
      }
    }

    return adjacents;
  }, []);
}
module.exports = exports['default'];