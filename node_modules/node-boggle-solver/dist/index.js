'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = solver;

var _triePrefixTree = require('trie-prefix-tree');

var _triePrefixTree2 = _interopRequireDefault(_triePrefixTree);

var _getDictionary = require('./getDictionary');

var _getDictionary2 = _interopRequireDefault(_getDictionary);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _initSolver = require('./initSolver');

var _initSolver2 = _interopRequireDefault(_initSolver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MIN_SIZE = _config2.default.minSize;
var MIN_MATRIX = MIN_SIZE * MIN_SIZE;
var MIN_WORD_LEN = _config2.default.minWordLen;
var DEFAULT_DICTIONARY = (0, _getDictionary2.default)();
var DEFAULT_TRIE = (0, _triePrefixTree2.default)(DEFAULT_DICTIONARY);

function solver() {
  var custom = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  if (!Array.isArray(custom)) {
    throw 'Custom dictionary should be an array with at least one value';
  }

  var isCustom = custom.length > 0;
  var trie = isCustom ? (0, _triePrefixTree2.default)(custom) : DEFAULT_TRIE;

  return {
    solve: function solve(boggle, callback) {
      var minWordLen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MIN_WORD_LEN;

      if (!callback || typeof callback !== 'function') {
        throw 'Expected callback function';
      }

      if (typeof boggle !== 'string' || boggle === '') {
        callback('Use uppercase, lowercase or space-delimited characters');
      }

      var letters = /\s/.test(boggle) ? boggle.replace(/\s/g, '') : boggle;
      var numLetters = letters.length;

      if (numLetters < MIN_MATRIX) {
        callback('Enter ' + MIN_MATRIX + ' letters or more');
      }

      var boggleSize = _utils2.default.boggleSize(numLetters);

      if (boggleSize === 0) {
        callback('Enter a valid number of letters, eg. 9 for 3x3, 16 for 4x4');
      }

      if (typeof minWordLen !== 'number' || minWordLen < MIN_WORD_LEN) {
        callback('Minimum word length is ' + MIN_WORD_LEN);
      }

      var result = (0, _initSolver2.default)(letters, boggleSize, trie, minWordLen);

      return callback(null, result);
    }
  };
};
module.exports = exports['default'];